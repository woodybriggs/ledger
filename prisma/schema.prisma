// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AccountSubType {
  accountSubTypeId String @id @default(cuid())
  name             String
  category         String
  type             String

  accounts Account[]

  @@unique([name, category, type])
}

model Account {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accountId String   @id @default(cuid())

  name         String
  number       Int
  denomination String?

  category         String
  type             String
  accountSubTypeId String?
  accountSubType   AccountSubType? @relation(fields: [accountSubTypeId], references: [accountSubTypeId])

  bankId String?
  bank   Bank?

  transactions Transaction[]

  children AccountClosure[] @relation(name: "parentAccount")
  parents  AccountClosure[] @relation(name: "childAccount")

  suppliers Supplier[]
  customers Customer[]

  lineItems LineItem[]
}

model AccountClosure {
  parentAccountId String
  parentAccount   Account @relation(fields: [parentAccountId], references: [accountId], name: "parentAccount")

  childAccountId String
  childAccount   Account @relation(fields: [childAccountId], references: [accountId], name: "childAccount")

  depth Int

  @@unique([parentAccountId, childAccountId, depth])
}

model Ledger {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ledgerId  String   @id @default(cuid())

  name       String
  ledgerType String @default("nominal")

  transactions Transaction[]
  customers    Customer[]
  suppliers    Supplier[]
}

model Transaction {
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  transactionId String   @id @default(cuid())

  transactionDate DateTime
  debitAmount     Decimal
  creditAmount    Decimal

  accountId String?
  account   Account? @relation(fields: [accountId], references: [accountId])

  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [supplierId])

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [customerId])

  journalEntryId String
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [journalEntryId])

  ledgerId String
  ledger   Ledger @relation(fields: [ledgerId], references: [ledgerId])
}

model JournalEntry {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  journalEntryId String   @id @default(cuid())

  exchangeRate Decimal?

  bankReconciledDate DateTime?
  vatReportedDate    DateTime?

  transactions Transaction[]

  purchaseRecordId String?         @unique
  purchaseRecord   PurchaseRecord? @relation(fields: [purchaseRecordId], references: [purchaseRecordId])

  saleRecordId String?     @unique
  saleRecord   SaleRecord? @relation(fields: [saleRecordId], references: [saleRecordId])
}

model Supplier {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  supplierId String   @id @default(cuid())

  name         String
  denomination String

  defaultNominalAccountId String?
  defaultNominalAccount   Account? @relation(fields: [defaultNominalAccountId], references: [accountId])

  shippingAddressId String?  @unique
  shippingAddress   Address? @relation(name: "supplierShippingAddress", fields: [shippingAddressId], references: [addressId])

  billingAddressId String?  @unique
  billingAddress   Address? @relation(name: "supplierBillingAddress", fields: [billingAddressId], references: [addressId])

  ledgerId String
  ledger   Ledger @relation(fields: [ledgerId], references: [ledgerId])

  transactions    Transaction[]
  purchaseRecords PurchaseRecord[]
}

model Customer {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String   @id @default(cuid())

  name         String
  denomination String

  defaultNominalAccountId String?
  defaultNominalAccount   Account? @relation(fields: [defaultNominalAccountId], references: [accountId])

  shippingAddressId String?  @unique
  shippingAddress   Address? @relation(name: "customerShippingAddress", fields: [shippingAddressId], references: [addressId])

  billingAddressId String?  @unique
  billingAddress   Address? @relation(name: "customerBillingAddress", fields: [billingAddressId], references: [addressId])

  ledgerId String
  ledger   Ledger @relation(fields: [ledgerId], references: [ledgerId])

  transactions Transaction[]
  saleRecords  SaleRecord[]
}

model Address {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addressId String   @id @default(cuid())

  addressLine1 String
  addressLine2 String?
  addressLine3 String?
  addressLine4 String?

  city                String?
  provinceStateCounty String?
  zipPostalCode       String?

  country String

  customerByBilling  Customer? @relation(name: "customerBillingAddress")
  customerByShipping Customer? @relation(name: "customerShippingAddress")

  supplierByBilling  Supplier? @relation(name: "supplierBillingAddress")
  supplierByShipping Supplier? @relation(name: "supplierShippingAddress")
}

model LineItem {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lineItemId String   @id @default(cuid())

  description String
  netAmount   Decimal
  vatAmount   Decimal
  grossAmount Decimal

  nominalAccountId String
  nominalAccount   Account @relation(fields: [nominalAccountId], references: [accountId])

  purchaseRecordId String?
  purchaseRecord   PurchaseRecord? @relation(fields: [purchaseRecordId], references: [purchaseRecordId])

  saleRecordId String?
  saleRecord   SaleRecord? @relation(fields: [saleRecordId], references: [saleRecordId])
}

model PurchaseRecord {
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  purchaseRecordId String   @id @default(cuid())
  transactionType  String
  transactionDate  DateTime
  status           String   @default("Outstanding")

  reference      String?
  attachmentLink String?

  denomination String
  exchangeRate Decimal

  lineItems   LineItem[]
  grossAmount Decimal

  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [supplierId])

  dueDate           DateTime?
  purchaseInvoiceId String?
  purchaseInvoice   PurchaseRecord? @relation(fields: [purchaseInvoiceId], references: [purchaseRecordId], name: "purchaseInvoicePayment")

  payments PurchaseRecord[] @relation(name: "purchaseInvoicePayment")

  journalEntryId String?       @unique
  journalEntry   JournalEntry?
}

model SaleRecord {
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  saleRecordId    String   @id @default(cuid())
  transactionType String
  transactionDate DateTime
  status          String   @default("Outstanding")

  reference      String?
  attachmentLink String?

  denomination String
  exchangeRate Decimal

  lineItems   LineItem[]
  grossAmount Decimal

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [customerId])

  dueDate       DateTime?
  saleInvoiceId String?
  saleInvoice   SaleRecord? @relation(fields: [saleInvoiceId], references: [saleRecordId], name: "saleInvoicePayment")

  payments SaleRecord[] @relation(name: "saleInvoicePayment")

  journalEntryId String?       @unique
  journalEntry   JournalEntry?
}

model Bank {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bankId    String   @id @default(cuid())

  name         String
  denomination String

  nominalAssetAccountId String  @unique
  nominalAssetAccount   Account @relation(fields: [nominalAssetAccountId], references: [accountId])
}
